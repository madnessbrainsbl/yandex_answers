Стажировка 2025: информационная безопасность

Ваш друг хочет написать веб-сервис с регистрацией и входом. Какие рекомендации вы дадите ему по безопасной реализации аутентификации?

-использовать bcrypt с солью или перцем для хеширования паролей, 
- настроить rate limiting против перебора, 
-включить HTTPS, 
для cookie установи Secure и HttpOnly, 
включить CSRF-защиту и двухфакторную аутентификацию.
 Для авторизации используй проверенные библиотеки (Passport.js, Django Auth), логировать  входы, обеспечить безопасное восстановление пароля через временные токены с коротким TTL. Не доверять клиентским данным и всегда валидировать их.

**
Выше вы давали рекомендации другу по безопасной реализации аутентификации.
Он хочет разместить сервис в docker-контейнерах. Какие рекомендации по безопасному деплою в контейнеры вы дадите?
**
Для безопасного деплоя в Docker лучше 
-использовать минимальные образы (Alpine), 
-запускать приложения не от root, применяй multi-stage builds, 
-регулярно обновлять образы. 
-хранить пароли и ключи через Docker secrets, 
-ограничивать ресурсы контейнера, 
-включать read-only файловую систему и сетевую изоляцию. 

Для профилактики сканировать образы на уязвимости (Trivy, Snyk), не включать sensitive данные в образы.

*


Вы обнаружили на сайте Local File Inclusion. Какие файлы вы будете пытаться открыть при помощи этой уязвимости?


После обнаружения LFI пытаюсь получить доступ к важным файлам: /etc/passwd, /etc/shadow (пользователи), /etc/hosts, /etc/resolv.conf (сеть), логи веб-сервера, конфигурации приложений (config.php, .env), SSH-ключи, истории команд, /proc/version и /proc/cpuinfo.

Если эти файлы недоступны, проверяю конфигурации, файлы сессий PHP в /tmp, использую path traversal (../../..) и ищу специфические файлы. Приоритет — данные для повышения привилегий или перемещения по системе.


*
Разработчик зашифровал секрет WUFOREVYX09GRkVSX1MxTVBMM19GTEBH==, но мы не верим, что шифрование стойкое. Докажи.


Этот секрет зашифрован с использованием  Base64, которая не шифровка, а просто кодировка.  то есть легко можно декодировать WUFOREVYX09GRkVSX1MxTVBMM19GTEBH  будет YANDEX_OFFER_S1MPL3_FL@G
Само Base64  определяется по QRNebfgVZG9zgZRG0ZGRvdOz, также по однозначным символам (A-Z, a-z, 0-9, +, /) и padding символы == в конце. Это обратимая кодировка, а не криптографическое шифрование, её может декодировать любой без ключа. Для настоящей защиты секретов надо использовать AES, ChaCha20 или ещё что-то стойкое.


*
Найди флаг или опиши до чего дошел http://158.160.39.5:13355/



воспользовался уязвимостью LFI и нашёл переменную CTF_FLAG=YANDEX_CsS_s0_sTyl1sh_So_s1Mpl3


*
Пользователи одного сайта стали жаловаться, что к их аккаунту кто-то получал доступ. Помоги нам проанализировать access-лог и понять как это могло произойти?


Вектор атаки - уязвимость SQL инъекция в скрипте find_user.cgi (эксплуатировалась с IP 36.32.3.74). Которое позволило злоумышленнику украсть логины пользователей и пароли. Далее начались массированные атаки подбора (brute-force) из различных IP-адресов для входа в случайные или скомпрометированные аккаунты. Возможно некоторые сайты уже раньше были взломаны, и злоумышленники используют их для своих замыслов.

